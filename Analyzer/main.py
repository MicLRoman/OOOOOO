import streamlit as st
import pandas as pd
import sqlite3
import os
import plotly.express as px
import datetime

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö ---

@st.cache_data
def load_user_registrations(db_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ö –∏–∑ SQLite."""
    try:
        with sqlite3.connect(db_path, uri=True) as conn:
            df = pd.read_sql_query("SELECT user_id, username FROM users", conn)
            df['user_id'] = df['user_id'].astype(str)
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ portfolio_bot.db: {e}")
        return pd.DataFrame(columns=['user_id', 'username'])

@st.cache_data
def load_product_events(json_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    try:
        df = pd.read_json(json_path)
        df['timestamp'] = pd.to_datetime(df['timestamp'], errors='coerce')
        if df['timestamp'].dt.tz is None:
             df['timestamp'] = df['timestamp'].dt.tz_localize('UTC')
        else:
             df['timestamp'] = df['timestamp'].dt.tz_convert('UTC')
        df.dropna(subset=['timestamp'], inplace=True)
        df = df[df['userId'] != 'unknown_user'].copy()
        df['userId'] = df['userId'].astype(str)
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ events_dump.json: {e}")
        return pd.DataFrame()

# --- –§—É–Ω–∫—Ü–∏–∏-—Ö–µ–ª–ø–µ—Ä—ã ---
def get_unique_users_for_event(df, event_name):
    if df.empty: return set()
    return set(df[df['eventName'] == event_name]['userId'].dropna().unique())

def safe_division(numerator, denominator):
    return (numerator / denominator * 100) if denominator > 0 else 0

# --- –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---

st.set_page_config(page_title="–ì–ª–∞–≤–Ω–∞—è | –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", layout="wide", initial_sidebar_state="expanded")

st.title("üìä –°–≤–æ–¥–Ω—ã–π –¥–∞—à–±–æ—Ä–¥")
st.markdown("–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏, –≤–æ—Ä–æ–Ω–∫–∞ –∏ –æ–±—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ---
DB_PATH = "portfolio_bot.db"
JSON_PATH = "events_dump.json"

if 'data_loaded' not in st.session_state:
    if os.path.exists(DB_PATH) and os.path.exists(JSON_PATH):
        
        registrations_df_full = load_user_registrations(DB_PATH)
        events_df_full = load_product_events(JSON_PATH)

        EXCLUDED_USERNAMES = ['MichaeLR_f', 'MichaeLR_s', 'GlYuchD', 'zzlaaatrr', 'neestyy']
        registrations_df = registrations_df_full[~registrations_df_full['username'].isin(EXCLUDED_USERNAMES)].copy()

        included_user_ids = set(registrations_df['user_id'])
        GLOBAL_START_DATE = pd.Timestamp("2025-09-23 00:00:00", tz='UTC')
        events_df = events_df_full[
            (events_df_full['userId'].isin(included_user_ids)) &
            (events_df_full['timestamp'] >= GLOBAL_START_DATE)
        ].copy()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
        st.session_state['registrations_df'] = registrations_df
        st.session_state['events_df'] = events_df
        st.session_state['registrations_df_full'] = registrations_df_full # –î–ª—è –ø–æ–∏—Å–∫–∞
        st.session_state['events_df_full'] = events_df_full # –î–ª—è –ø–æ–∏—Å–∫–∞
        st.session_state['data_loaded'] = True
        
    else:
        st.error("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        st.info(f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã `{DB_PATH}` –∏ `{JSON_PATH}` –ª–µ–∂–∞—Ç –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ, —á—Ç–æ –∏ —Å–∫—Ä–∏–ø—Ç.")
        st.stop()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏
registrations_df = st.session_state['registrations_df']
events_df = st.session_state['events_df']

# --- –ë–û–ö–û–í–ê–Ø –ü–ê–ù–ï–õ–¨ –° –§–ò–õ–¨–¢–†–ê–ú–ò ---
st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã")

if not events_df.empty:
    min_ts = events_df['timestamp'].min()
    max_ts = events_df['timestamp'].max()

    filter_type = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:", ("–û–±—â–∏–π –ø–µ—Ä–∏–æ–¥", "–°—É—Ç–æ—á–Ω—ã–π —Å—Ä–µ–∑ (—Å 8:00 –ú–°–ö)"))

    if filter_type == "–°—É—Ç–æ—á–Ω—ã–π —Å—Ä–µ–∑ (—Å 8:00 –ú–°–ö)":
        selected_date = st.sidebar.date_input("–î–∞—Ç–∞ –¥–ª—è —Å—Ä–µ–∑–∞", value=max_ts.date() - datetime.timedelta(days=1), min_value=min_ts.date(), max_value=max_ts.date())
        start_datetime = pd.Timestamp(datetime.datetime.combine(selected_date, datetime.time(5,0)), tz='UTC') 
        end_datetime = start_datetime + datetime.timedelta(days=1)
    else:
        period = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", ("–í—Å–µ –≤—Ä–µ–º—è", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"))
        if period == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞":
            start_datetime = max_ts - datetime.timedelta(hours=24)
        elif period == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π":
            start_datetime = max_ts - datetime.timedelta(days=7)
        elif period == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π":
            start_datetime = max_ts - datetime.timedelta(days=30)
        else:
            start_datetime = min_ts
        end_datetime = max_ts
    
    st.sidebar.write(f"**–ê–Ω–∞–ª–∏–∑ –∑–∞ –ø–µ—Ä–∏–æ–¥:**")
    st.sidebar.info(f"–°: {start_datetime.strftime('%Y-%m-%d %H:%M')} UTC\n\n–ü–æ: {end_datetime.strftime('%Y-%m-%d %H:%M')} UTC")

    mask = (events_df['timestamp'] >= start_datetime) & (events_df['timestamp'] < end_datetime)
    filtered_events_df = events_df.loc[mask]
    st.session_state['filtered_events_df'] = filtered_events_df # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
else:
    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    st.stop()

# --- –†–∞—Å—á–µ—Ç—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ ---
registered_users = set(registrations_df['user_id'])
all_intent_users = get_unique_users_for_event(events_df, 'click_confirm_portfolio')
all_final_users = get_unique_users_for_event(events_df, 'page_view_final')
acquisition_users_period = get_unique_users_for_event(filtered_events_df, 'page_view_main')
activation_users_period = get_unique_users_for_event(filtered_events_df, 'page_view_portfolio')
intent_users_period = get_unique_users_for_event(filtered_events_df, 'click_confirm_portfolio')
final_users_period = get_unique_users_for_event(filtered_events_df, 'page_view_final')

st.header("–°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è –≤–æ—Ä–æ–Ω–∫–∞")
st.subheader("–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–æ–±—â–∏–µ)")
metric_col1, metric_col2, metric_col3 = st.columns(3)
metric_col1.metric("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –±–æ—Ç–µ (—Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤)", f"{len(registered_users)} üë§")
metric_col2.metric("CR: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è -> –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"{safe_division(len(all_intent_users), len(registered_users)):.2f}%")
metric_col3.metric("CR: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è -> –§–∏–Ω–∞–ª", f"{safe_division(len(all_final_users), len(registered_users)):.2f}%")

st.subheader(f"–ü—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è –≤–æ—Ä–æ–Ω–∫–∞ (–∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥)")
funnel_data = {'–≠—Ç–∞–ø': ['–ü—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ', '–ê–∫—Ç–∏–≤–∞—Ü–∏—è', '–ù–∞–º–µ—Ä–µ–Ω–∏–µ', '–£–¥–µ—Ä–∂–∞–Ω–∏–µ'],
               '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏': [len(acquisition_users_period), len(activation_users_period), len(intent_users_period), len(final_users_period)]}
funnel_df = pd.DataFrame(funnel_data)
base_for_cr = len(acquisition_users_period)
if base_for_cr > 0:
    funnel_df['CR –æ—Ç –ü—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è'] = funnel_df['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'].apply(lambda x: (x / base_for_cr) * 100)
    funnel_df['–≠—Ç–∞–ø —Å CR'] = funnel_df.apply(lambda row: f"{row['–≠—Ç–∞–ø']} | CR: {row['CR –æ—Ç –ü—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è']:.1f}%", axis=1)
else:
    funnel_df['–≠—Ç–∞–ø —Å CR'] = funnel_df['–≠—Ç–∞–ø']

fig_funnel = px.funnel(funnel_df, x='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', y='–≠—Ç–∞–ø —Å CR', title="–í–æ—Ä–æ–Ω–∫–∞ –æ—Ç –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ –ø–æ–∫—É–ø–∫–∏")
st.plotly_chart(fig_funnel, use_container_width=True)

st.divider()

st.header("üïí –ü–æ—á–∞—Å–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
st.markdown("–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ **—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö** –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞—Ö–æ–¥–∏–≤—à–∏—Ö –≤ Mini App (`page_view_main`) –≤ –∫–∞–∂–¥—ã–π —á–∞—Å.")
page_views_df = filtered_events_df[filtered_events_df['eventName'] == 'page_view_main'].copy()
if not page_views_df.empty:
    page_views_df['date_hour'] = page_views_df['timestamp'].dt.floor('H')
    hourly_activity = page_views_df.groupby('date_hour')['userId'].nunique().rename('–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
    if not hourly_activity.empty:
        full_time_range = pd.date_range(start=start_datetime.floor('H'), end=end_datetime.ceil('H'), freq='H')
        hourly_activity = hourly_activity.reindex(full_time_range, fill_value=0)
    st.bar_chart(hourly_activity, height=600)
else:
    st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–µ—â–µ–Ω–∏—è—Ö ('page_view_main') –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")

