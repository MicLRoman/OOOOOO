import streamlit as st
import pandas as pd

# --- –§—É–Ω–∫—Ü–∏–∏-—Ö–µ–ª–ø–µ—Ä—ã ---
def get_unique_users_for_event(df, event_name):
    if df.empty: return set()
    return set(df[df['eventName'] == event_name]['userId'].dropna().unique())

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", layout="wide")
st.title("üë• –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
st.markdown("–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –≤–æ—Ä–æ–Ω–∫–µ –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—É—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

if 'data_loaded' not in st.session_state:
    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
    st.stop()

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–µ—Å—Å–∏–∏ ---
registrations_df = st.session_state['registrations_df']
events_df = st.session_state['events_df']
registrations_df_full = st.session_state['registrations_df_full']
events_df_full = st.session_state['events_df_full']

# --- –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è ---
st.header("–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É —ç—Ç–∞–ø—É (–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è)")

registered_users = set(registrations_df['user_id'])
all_acquisition_users = get_unique_users_for_event(events_df, 'page_view_main')
all_activation_users = get_unique_users_for_event(events_df, 'page_view_portfolio')
all_intent_users = get_unique_users_for_event(events_df, 'click_confirm_portfolio')
all_final_users = get_unique_users_for_event(events_df, 'page_view_final')

dropped_after_reg = registered_users - all_acquisition_users
dropped_after_acq = all_acquisition_users - all_activation_users
dropped_after_act = all_activation_users - all_intent_users
dropped_after_int = all_intent_users - all_final_users

tab_titles = [
    f"–¢–æ–ª—å–∫–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ({len(dropped_after_reg)})",
    f"–û—Ç–≤–∞–ª–∏–ª–∏—Å—å –ø–æ—Å–ª–µ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è ({len(dropped_after_acq)})",
    f"–û—Ç–≤–∞–ª–∏–ª–∏—Å—å –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ({len(dropped_after_act)})",
    f"–û—Ç–≤–∞–ª–∏–ª–∏—Å—å –ø–æ—Å–ª–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è ({len(dropped_after_int)})",
    f"–î–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ ({len(all_final_users)})"
]
tabs = st.tabs(tab_titles)
drop_off_sets = [dropped_after_reg, dropped_after_acq, dropped_after_act, dropped_after_int, all_final_users]

for i, tab in enumerate(tabs):
    with tab:
        user_subset_df = registrations_df[registrations_df['user_id'].isin(drop_off_sets[i])]
        st.dataframe(user_subset_df, use_container_width=True, height=400)

st.divider()

# --- –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
st.header("üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
username_to_find = st.text_input("–í–≤–µ–¥–∏—Ç–µ username –¥–ª—è –ø–æ–∏—Å–∫–∞ (–∞–Ω–∞–ª–∏–∑ –ø–æ –≤—Å–µ–º –¥–∞–Ω–Ω—ã–º, –±–µ–∑ —É—á–µ—Ç–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤):")

if username_to_find:
    user_info = registrations_df_full[registrations_df_full['username'].str.lower() == username_to_find.lower()]
    if not user_info.empty:
        user_id = user_info['user_id'].iloc[0]
        username = user_info['username'].iloc[0]
        st.subheader(f"–û—Ç—á–µ—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {username}")
        st.markdown(f"**User ID:** `{user_id}`")

        user_events = events_df_full[events_df_full['userId'] == user_id].sort_values('timestamp')
        if not user_events.empty:
            st.write(f"**–ü–µ—Ä–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–¥—É–∫—Ç–µ:** {user_events['timestamp'].min().strftime('%Y-%m-%d %H:%M:%S')} UTC")
        else:
            st.write("**–ü–µ—Ä–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–¥—É–∫—Ç–µ:** –ù–µ –Ω–∞–π–¥–µ–Ω–∞")

        stage = "–¢–æ–ª—å–∫–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
        if user_id in all_acquisition_users: stage = "–ü—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ (–∑–∞—à–µ–ª –≤ Mini App)"
        if user_id in all_activation_users: stage = "–ê–∫—Ç–∏–≤–∞—Ü–∏—è (—Å–æ–∑–¥–∞–ª –ø–æ—Ä—Ç—Ñ–µ–ª—å)"
        if user_id in all_intent_users: stage = "–ù–∞–º–µ—Ä–µ–Ω–∏–µ (–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ—Ä—Ç—Ñ–µ–ª—å)"
        if user_id in all_final_users: stage = "–£–¥–µ—Ä–∂–∞–Ω–∏–µ (–¥–æ—à–µ–ª –¥–æ –ø–æ–∫—É–ø–∫–∏)"
        st.write(f"**–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø –≤–æ—Ä–æ–Ω–∫–∏:** {stage}")

        st.markdown("---")
        st.write("#### –î–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞")
        survey_event = user_events[user_events['eventName'] == 'submit_survey'].tail(1)
        if not survey_event.empty: st.json(survey_event['eventData'].iloc[0])
        else: st.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –æ–ø—Ä–æ—Å.")

        st.write("#### –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å (–ø–æ—Å–ª–µ–¥–Ω–∏–π)")
        build_event = user_events[user_events['eventName'] == 'confirm_all_and_build'].tail(1)
        if not build_event.empty: st.json(build_event['eventData'].iloc[0])
        else: st.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª –ø–æ—Ä—Ç—Ñ–µ–ª—å.")
    else:
        st.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π.")
