import streamlit as st
import pandas as pd
import plotly.express as px

# --- –§—É–Ω–∫—Ü–∏–∏-—Ö–µ–ª–ø–µ—Ä—ã (–¥—É–±–ª–∏—Ä—É–µ–º –¥–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã) ---
def get_unique_users_for_event(df, event_name):
    if df.empty: return set()
    return set(df[df['eventName'] == event_name]['userId'].dropna().unique())

def safe_division(numerator, denominator):
    return (numerator / denominator * 100) if denominator > 0 else 0

st.set_page_config(page_title="–í–æ—Ä–æ–Ω–∫–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º", layout="wide")
st.title("–í–æ—Ä–æ–Ω–∫–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º")
st.markdown("–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏—Ö –æ—Ç–≤–µ—Ç–∞–º –≤ –æ–ø—Ä–æ—Å–µ –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫ —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –º–µ—Ç—Ä–∏–∫–∏ –∏ –≤–æ—Ä–æ–Ω–∫—É.")

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ—Å—Å–∏–∏ ---
if 'events_df' not in st.session_state or 'registrations_df' not in st.session_state:
    st.warning("–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
    st.stop()

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–µ—Å—Å–∏–∏ ---
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–µ, –Ω–æ —É–∂–µ –æ—á–∏—â–µ–Ω–Ω—ã–µ –æ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö —é–∑–µ—Ä–æ–≤ –∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞—Ç –¥–∞–Ω–Ω—ã–µ
events_df = st.session_state['events_df']
registrations_df = st.session_state['registrations_df']
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
filtered_events_df_by_time = st.session_state['filtered_events_df']


# --- –§–ò–õ–¨–¢–†–´ –ü–û –û–ü–†–û–°–£ –í –ë–û–ö–û–í–û–ô –ü–ê–ù–ï–õ–ò ---
st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º")

# 1. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫—Ç–æ –ø—Ä–æ—Ö–æ–¥–∏–ª –æ–ø—Ä–æ—Å
survey_events = events_df[events_df['eventName'] == 'submit_survey'].copy()
if survey_events.empty:
    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.")
    st.stop()

# 2. –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ eventData –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
survey_events['age'] = survey_events['eventData'].apply(lambda x: x.get('age'))
survey_events['experience'] = survey_events['eventData'].apply(lambda x: x.get('experience'))
survey_events['kahnemanChoice'] = survey_events['eventData'].apply(lambda x: x.get('kahnemanChoice'))
survey_events['activities'] = survey_events['eventData'].apply(lambda x: x.get('activities', []))

# 3. –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
selected_ages = st.sidebar.multiselect(
    "–í–æ–∑—Ä–∞—Å—Ç",
    options=survey_events['age'].dropna().unique(),
    default=[]
)
selected_experiences = st.sidebar.multiselect(
    "–û–ø—ã—Ç",
    options=survey_events['experience'].dropna().unique(),
    default=[]
)
selected_kahneman = st.sidebar.multiselect(
    "–¢–µ—Å—Ç –ö–∞–Ω–µ–º–∞–Ω–∞",
    options=survey_events['kahnemanChoice'].dropna().unique(),
    default=[]
)
all_activities = survey_events.explode('activities')['activities'].dropna().unique()
selected_activities = st.sidebar.multiselect(
    "–î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
    options=all_activities,
    default=[]
)

# 4. –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
users_in_segment = survey_events.copy()
if selected_ages:
    users_in_segment = users_in_segment[users_in_segment['age'].isin(selected_ages)]
if selected_experiences:
    users_in_segment = users_in_segment[users_in_segment['experience'].isin(selected_experiences)]
if selected_kahneman:
    users_in_segment = users_in_segment[users_in_segment['kahnemanChoice'].isin(selected_kahneman)]
if selected_activities:
    users_in_segment = users_in_segment[users_in_segment['activities'].apply(lambda x: any(item in selected_activities for item in x))]

segment_user_ids = set(users_in_segment['userId'].unique())

st.sidebar.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–µ–≥–º–µ–Ω—Ç–µ: {len(segment_user_ids)}")

# --- –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–µ–≥–º–µ–Ω—Ç—É ---
registrations_df_segment = registrations_df[registrations_df['user_id'].isin(segment_user_ids)]
filtered_events_df_segment = filtered_events_df_by_time[filtered_events_df_by_time['userId'].isin(segment_user_ids)]


# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ ---
if filtered_events_df_segment.empty and segment_user_ids:
     st.warning("–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –Ω–æ —É –Ω–∏—Ö –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏.")
elif not segment_user_ids:
    st.warning("–ù–∏ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.")
else:
    # --- –†–∞—Å—á–µ—Ç –≤–æ—Ä–æ–Ω–∫–∏ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ ---
    acquisition_users = get_unique_users_for_event(filtered_events_df_segment, 'page_view_main')
    activation_users = get_unique_users_for_event(filtered_events_df_segment, 'page_view_portfolio')
    intent_users = get_unique_users_for_event(filtered_events_df_segment, 'click_confirm_portfolio')
    final_users = get_unique_users_for_event(filtered_events_df_segment, 'page_view_final')
    
    st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞")
    
    st.subheader("–ü—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è –≤–æ—Ä–æ–Ω–∫–∞")
    funnel_data = {
        '–≠—Ç–∞–ø': ['–ü—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ (–∑–∞—à–ª–∏ –≤ Mini App)', '–ê–∫—Ç–∏–≤–∞—Ü–∏—è (—Å–æ–∑–¥–∞–ª–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—å)', '–ù–∞–º–µ—Ä–µ–Ω–∏–µ (–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—å)', '–£–¥–µ—Ä–∂–∞–Ω–∏–µ (–¥–æ—à–ª–∏ –¥–æ –ø–æ–∫—É–ø–∫–∏)'],
        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏': [len(acquisition_users), len(activation_users), len(intent_users), len(final_users)]
    }
    funnel_df = pd.DataFrame(funnel_data)
    
    base_for_cr = len(acquisition_users)
    if base_for_cr > 0:
        funnel_df['CR –æ—Ç –ü—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è'] = funnel_df['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'].apply(lambda x: (x / base_for_cr) * 100)
        funnel_df['–≠—Ç–∞–ø —Å CR'] = funnel_df.apply(
            lambda row: f"{row['–≠—Ç–∞–ø']} | CR: {row['CR –æ—Ç –ü—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è']:.1f}%", axis=1
        )
    else:
        funnel_df['–≠—Ç–∞–ø —Å CR'] = funnel_df['–≠—Ç–∞–ø']

    fig_funnel = px.funnel(funnel_df, x='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', y='–≠—Ç–∞–ø —Å CR', title="–í–æ—Ä–æ–Ω–∫–∞ –æ—Ç –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ –ø–æ–∫—É–ø–∫–∏ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞")
    st.plotly_chart(fig_funnel, use_container_width=True)

    # --- –ü–æ—á–∞—Å–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ ---
    st.header("üïí –ü–æ—á–∞—Å–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–µ–≥–º–µ–Ω—Ç–µ")
    page_views_df = filtered_events_df_segment[filtered_events_df_segment['eventName'] == 'page_view_main'].copy()
    if not page_views_df.empty:
        page_views_df['date_hour'] = page_views_df['timestamp'].dt.floor('H')
        hourly_activity = page_views_df.groupby('date_hour')['userId'].nunique().rename('–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
        
        if not hourly_activity.empty:
            start_datetime = st.session_state.get('start_datetime', page_views_df['timestamp'].min())
            end_datetime = st.session_state.get('end_datetime', page_views_df['timestamp'].max())
            full_time_range = pd.date_range(start=start_datetime.floor('H'), end=end_datetime.ceil('H'), freq='H')
            hourly_activity = hourly_activity.reindex(full_time_range, fill_value=0)

        st.bar_chart(hourly_activity, height=600)
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–µ—â–µ–Ω–∏—è—Ö ('page_view_main') –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —ç—Ç–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ.")
