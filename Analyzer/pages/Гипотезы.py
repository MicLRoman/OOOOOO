import streamlit as st
import pandas as pd
import plotly.express as px

# --- –§—É–Ω–∫—Ü–∏–∏-—Ö–µ–ª–ø–µ—Ä—ã (–¥—É–±–ª–∏—Ä—É–µ–º –¥–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã) ---
def get_first_event_per_user(df, event_name):
    if df.empty or event_name not in df['eventName'].unique():
        return pd.DataFrame()
    events = df[df['eventName'] == event_name].sort_values('timestamp')
    return events.drop_duplicates(subset=['userId'], keep='first')

def get_unique_users_for_event(df, event_name, event_data_filter=None):
    if df.empty: return set()
    subset = df[df['eventName'] == event_name]
    if event_data_filter:
        mask = subset['eventData'].apply(lambda d: isinstance(d, dict) and all(d.get(k) == v for k, v in event_data_filter.items()))
        subset = subset[mask]
    return set(subset['userId'].dropna().unique())

def safe_division(numerator, denominator):
    return (numerator / denominator * 100) if denominator > 0 else 0

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ –≥–∏–ø–æ—Ç–µ–∑", layout="wide")
st.title("üßê –ê–Ω–∞–ª–∏–∑ –≥–∏–ø–æ—Ç–µ–∑")

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ—Å—Å–∏–∏ ---
if 'filtered_events_df' not in st.session_state or st.session_state['filtered_events_df'].empty:
    st.warning("–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
    st.stop()

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–µ—Å—Å–∏–∏ ---
filtered_events_df = st.session_state['filtered_events_df']
registrations_df = st.session_state['registrations_df']

# --- –ü–µ—Ä–µ—Å—á–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
activation_users_period = get_unique_users_for_event(filtered_events_df, 'page_view_portfolio')
intent_users_period = get_unique_users_for_event(filtered_events_df, 'click_confirm_portfolio')
final_users_period = get_unique_users_for_event(filtered_events_df, 'page_view_final')

# --- –ë–õ–û–ö–ò –ê–ù–ê–õ–ò–ó–ê ---
with st.container(border=True):
    st.subheader("–í–ª–∏—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏—é –≤ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ")
    first_goal_choices = get_first_event_per_user(filtered_events_df, 'select_goal_on_main')
    if not first_goal_choices.empty:
        first_goal_choices['goal'] = first_goal_choices['eventData'].apply(lambda x: x.get('goal'))
        goal_stats = {}
        for goal in first_goal_choices['goal'].dropna().unique():
            goal_users = set(first_goal_choices[first_goal_choices['goal'] == goal]['userId'])
            converted_users = len(intent_users_period.intersection(goal_users))
            goal_stats[goal] = {'total': len(goal_users), 'converted': converted_users, 'cr': safe_division(converted_users, len(goal_users))}
        goal_df = pd.DataFrame(goal_stats).T.sort_values('cr', ascending=False)
        st.dataframe(goal_df.style.format({'cr': '{:.1f}%'}), use_container_width=True)
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã–±–æ—Ä–µ —Ü–µ–ª–∏.")

with st.container(border=True):
    st.subheader("–ê–Ω–∞–ª–∏–∑ –†–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—è")
    first_risk_choices = get_first_event_per_user(filtered_events_df, 'auto_selection_risk_selected')
    if not first_risk_choices.empty:
        first_risk_choices['riskProfile'] = first_risk_choices['eventData'].apply(lambda x: x.get('riskProfile'))
        col1, col2 = st.columns([1,2])
        with col1:
            st.markdown("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—è–º**")
            risk_dist = first_risk_choices['riskProfile'].value_counts()
            st.dataframe(risk_dist)
        with col2:
            st.markdown("**–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—é**")
            risk_stats = {}
            for profile in first_risk_choices['riskProfile'].dropna().unique():
                risk_users = set(first_risk_choices[first_risk_choices['riskProfile'] == profile]['userId'])
                converted_users = len(intent_users_period.intersection(risk_users))
                risk_stats[profile] = {'total_users': len(risk_users), 'converted_users': converted_users, 'intent_cr': safe_division(converted_users, len(risk_users))}
            risk_df = pd.DataFrame(risk_stats).T.sort_values('intent_cr', ascending=False)
            st.dataframe(risk_df.style.format({'intent_cr': '{:.1f}%'}), use_container_width=True)
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã–±–æ—Ä–µ —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—è.")

with st.container(border=True):
    st.subheader("–í–ª–∏—è–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
    edit_users = get_unique_users_for_event(filtered_events_df, 'click_edit_portfolio')
    if len(activation_users_period) > 0:
        activated_but_not_edited = activation_users_period - edit_users
        adoption_rate = safe_division(len(edit_users), len(activation_users_period))
        cr_with_edit = safe_division(len(intent_users_period.intersection(edit_users)), len(edit_users))
        cr_without_edit = safe_division(len(intent_users_period.intersection(activated_but_not_edited)), len(activated_but_not_edited))
        col1, col2, col3 = st.columns(3)
        col1.metric("Adoption Rate —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞", f"{adoption_rate:.1f}%")
        col2.metric("CR –≤ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –° —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º", f"{cr_with_edit:.1f}%")
        col3.metric("CR –≤ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ë–ï–ó —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", f"{cr_without_edit:.1f}%", delta=f"{cr_with_edit - cr_without_edit:.1f}%")

        with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Ö —Ä–µ–¥–∞–∫—Ç–æ—Ä"):
            if edit_users:
                edit_users_df = registrations_df[registrations_df['user_id'].isin(edit_users)].copy()
                edit_users_df['–î–æ—à–µ–ª –¥–æ –ø–æ–∫—É–ø–∫–∏'] = edit_users_df['user_id'].isin(final_users_period)
                st.dataframe(edit_users_df[['user_id', 'username', '–î–æ—à–µ–ª –¥–æ –ø–æ–∫—É–ø–∫–∏']], use_container_width=True)
            else:
                st.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Ö —Ä–µ–¥–∞–∫—Ç–æ—Ä.")
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–ª–∏—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞.")

with st.container(border=True):
    st.subheader("–ê–Ω–∞–ª–∏–∑ —Ñ–∏—á–µ–π –¥–æ–≤–µ—Ä–∏—è: '–ü–æ—Ö–æ–∂–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–∏'")
    similar_view_users = get_unique_users_for_event(filtered_events_df, 'switch_portfolio_view', {'view': 'similar'})
    if len(activation_users_period) > 0:
        activated_not_used_similar = activation_users_period - similar_view_users
        adoption_rate = safe_division(len(similar_view_users), len(activation_users_period))
        cr_with_similar = safe_division(len(intent_users_period.intersection(similar_view_users)), len(similar_view_users))
        cr_without_similar = safe_division(len(intent_users_period.intersection(activated_not_used_similar)), len(activated_not_used_similar))
        col1, col2, col3 = st.columns(3)
        col1.metric("Adoption Rate '–ü–æ—Ö–æ–∂–∏—Ö –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π'", f"{adoption_rate:.1f}%")
        col2.metric("CR –≤ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –° –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º", f"{cr_with_similar:.1f}%")
        col3.metric("CR –≤ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ë–ï–ó –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", f"{cr_without_similar:.1f}%", delta=f"{cr_with_similar - cr_without_similar:.1f}%")

        with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–º–æ—Ç—Ä–µ–≤—à–∏—Ö –ø–æ—Ö–æ–∂–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–∏"):
            if similar_view_users:
                similar_users_df = registrations_df[registrations_df['user_id'].isin(similar_view_users)].copy()
                similar_users_df['–î–æ—à–µ–ª –¥–æ –ø–æ–∫—É–ø–∫–∏'] = similar_users_df['user_id'].isin(final_users_period)
                st.dataframe(similar_users_df[['user_id', 'username', '–î–æ—à–µ–ª –¥–æ –ø–æ–∫—É–ø–∫–∏']], use_container_width=True)
            else:
                st.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–º–æ—Ç—Ä–µ–≤—à–∏—Ö –ø–æ—Ö–æ–∂–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–∏.")
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–ª–∏—è–Ω–∏—è —Ñ–∏—á–∏ '–ü–æ—Ö–æ–∂–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–∏'.")
