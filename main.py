# -*- coding: utf-8 -*-
# –≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –ö–û–†–ù–ï–í–û–ô –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞

import telebot
import firebase_admin
from firebase_admin import credentials, firestore
import json

# --- –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ –ø–∞–∫–µ—Ç–∞ portfolio_bot ---
from portfolio_bot import config
from portfolio_bot.database.repository import CombinedRepository
from portfolio_bot.domain.calculator import PortfolioCalculator
from portfolio_bot.handlers.start import register_start_handler
from portfolio_bot.handlers.about import register_about_handler
from portfolio_bot.handlers.admin import register_admin_handlers

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–æ–∫–∞ –≤ –º–µ—Å—è—Ü–∞—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏ ---
def format_term_in_months(months):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é —Å—Ç—Ä–æ–∫—É."""
    if not isinstance(months, (int, float)) or months <= 0:
        return "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å—Ä–æ–∫"
    
    months = int(months)
    years = round(months / 12, 1)
    if years.is_integer():
        years = int(years)

    last_digit = months % 10
    last_two_digits = months % 100

    if last_two_digits in [11, 12, 13, 14]:
        month_str = "–º–µ—Å—è—Ü–µ–≤"
    elif last_digit == 1:
        month_str = "–º–µ—Å—è—Ü"
    elif last_digit in [2, 3, 4]:
        month_str = "–º–µ—Å—è—Ü–∞"
    else:
        month_str = "–º–µ—Å—è—Ü–µ–≤"
    
    return f"{months} {month_str} (~{years} –≥.)"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Admin SDK ---
db = None
try:
    cred = credentials.Certificate(config.FIREBASE_CREDENTIALS_PATH)
    firebase_admin.initialize_app(cred)
    db = firestore.client()
    print("‚úÖ Firebase Admin SDK —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
except Exception as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase: {e}")
    print("-> –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /get_stats) –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–≠–ö–ï–ù–î-–õ–û–ì–ò–ö–ò ---
repository = CombinedRepository()
calculator = PortfolioCalculator(repository)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = telebot.TeleBot(config.BOT_TOKEN)
print("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω...")

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ü–µ–ª–µ–π ---
@bot.message_handler(content_types=['web_app_data'])
def handle_web_app_data(message):
    try:
        data_str = message.web_app_data.data
        final_data = json.loads(data_str)
        investment_data = final_data.get('investmentData', {})
        portfolio_data = final_data.get('portfolioData', {})
        
        goal = investment_data.get('goal', 'grow')
        monthly_contribution = portfolio_data.get('monthly_contribution', 0)
        term_months = portfolio_data.get('term_months')
        formatted_term = format_term_in_months(term_months)
        
        contribution_text = ""
        if monthly_contribution > 0:
            contribution_text = f"–ï–∂–µ–º–µ—Å—è—á–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: *{monthly_contribution:,.0f} ‚ÇΩ*\\n"

        strategy_name = portfolio_data.get('strategy_name', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')
        expected_return = portfolio_data.get('expected_annual_return', 0)
        composition = portfolio_data.get('composition', [])
        
        composition_text = "\\n".join([
            f"‚ñ´Ô∏è *{item.get('fund_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–∫—Ç–∏–≤')}* ({item.get('percentage', 0):.0f}%)"
            for item in composition
        ])

        forecast = portfolio_data.get('forecast', {})
        forecast_min = forecast.get('min', [])[-1]
        forecast_avg = forecast.get('avg', [])[-1]
        forecast_max = forecast.get('max', [])[-1]
        initial_amount = portfolio_data.get('initial_amount', 0)
        
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å ---
        probability = portfolio_data.get('goalAchievedProbability')
        probability_text = ""
        if probability is not None:
            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ë–æ–ª–µ–µ —É–¥–∞—á–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ ---
            if goal == 'grow':
                prob_label = "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ –∫–∞–ø–∏—Ç–∞–ª –ø—Ä–µ–≤—ã—Å–∏—Ç –≤–ª–æ–∂–µ–Ω–∏—è"
            else:
                prob_label = "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏"
            probability_text = f"_{prob_label}: *{probability}%*_\\n\\n"


        response_text = ""
        
        if goal == 'dream':
            dream_amount = investment_data.get('dreamAmount', 0)
            response_text = (
                f"üéØ *–í–∞—à–∞ —Ü–µ–ª—å: –ù–∞–∫–æ–ø–∏—Ç—å –Ω–∞ –º–µ—á—Ç—É*\\n\\n"
                f"–°—É–º–º–∞ —Ü–µ–ª–∏: *{dream_amount:,.0f} ‚ÇΩ*\\n"
                f"–ü–µ—Ä–≤—ã–π –≤–∑–Ω–æ—Å: *{initial_amount:,.0f} ‚ÇΩ*\\n"
                f"{contribution_text}"
                f"–°—Ä–æ–∫: *{formatted_term}*\\n\\n"
                f"üìà *–ü—Ä–æ–≥–Ω–æ–∑ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞*\\n"
                f"‚Ä¢ –í —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ: *~{forecast_min:,.0f} ‚ÇΩ*\\n"
                f"‚Ä¢ –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑: *~{forecast_avg:,.0f} ‚ÇΩ*\\n"
                f"‚Ä¢ –í –ª—É—á—à–µ–º —Å–ª—É—á–∞–µ: *~{forecast_max:,.0f} ‚ÇΩ*\\n"
                f"{probability_text}"
                f"*{strategy_name} (~{expected_return}% –≥–æ–¥–æ–≤—ã—Ö)*\\n"
                f"{composition_text}"
            )
        elif goal == 'passive':
            passive_income = investment_data.get('passiveIncome', 0)
            min_income = (forecast_min * (18.0 / 100)) / 12
            avg_income = (forecast_avg * (18.0 / 100)) / 12
            max_income = (forecast_max * (18.0 / 100)) / 12
            response_text = (
                f"üèùÔ∏è *–í–∞—à–∞ —Ü–µ–ª—å: –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥*\\n\\n"
                f"–ñ–µ–ª–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: *{passive_income:,.0f} ‚ÇΩ/–º–µ—Å*\\n"
                f"–ü–µ—Ä–≤—ã–π –≤–∑–Ω–æ—Å: *{initial_amount:,.0f} ‚ÇΩ*\\n"
                f"{contribution_text}"
                f"–°—Ä–æ–∫ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è: *{formatted_term}*\\n\\n"
                f"üìà *–ü—Ä–æ–≥–Ω–æ–∑ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞ –≤ –º–µ—Å—è—Ü*\\n"
                f"‚Ä¢ –í —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ: *~{min_income:,.0f} ‚ÇΩ*\\n"
                f"‚Ä¢ –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑: *~{avg_income:,.0f} ‚ÇΩ*\\n"
                f"‚Ä¢ –í –ª—É—á—à–µ–º —Å–ª—É—á–∞–µ: *~{max_income:,.0f} ‚ÇΩ*\\n"
                f"{probability_text}"
                f"*{strategy_name} (~{expected_return}% –≥–æ–¥–æ–≤—ã—Ö)*\\n"
                f"{composition_text}"
            )
        else: # goal == 'grow'
            response_text = (
                f"üí∞ *–í–∞—à–∞ —Ü–µ–ª—å: –ü—Ä–∏—É–º–Ω–æ–∂–∏—Ç—å –∫–∞–ø–∏—Ç–∞–ª*\\n\\n"
                f"–ü–µ—Ä–≤—ã–π –≤–∑–Ω–æ—Å: *{initial_amount:,.0f} ‚ÇΩ*\\n"
                f"{contribution_text}"
                f"–°—Ä–æ–∫: *{formatted_term}*\\n\\n"
                f"üìà *–ü—Ä–æ–≥–Ω–æ–∑ —Ä–æ—Å—Ç–∞ –∫–∞–ø–∏—Ç–∞–ª–∞*\\n"
                f"‚Ä¢ –í —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ: *~{forecast_min:,.0f} ‚ÇΩ*\\n"
                f"‚Ä¢ –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑: *~{forecast_avg:,.0f} ‚ÇΩ*\\n"
                f"‚Ä¢ –í –ª—É—á—à–µ–º —Å–ª—É—á–∞–µ: *~{forecast_max:,.0f} ‚ÇΩ*\\n"
                f"{probability_text}"
                f"*{strategy_name} (~{expected_return}% –≥–æ–¥–æ–≤—ã—Ö)*\\n"
                f"{composition_text}"
            )

        bot.send_message(message.chat.id, response_text, parse_mode='Markdown')

    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App: {e}")
        bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è.")

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
register_start_handler(bot, repository)
register_about_handler(bot)
register_admin_handlers(bot, db, config.APP_ID, config.ADMIN_IDS)
print("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    bot.polling(none_stop=True)
