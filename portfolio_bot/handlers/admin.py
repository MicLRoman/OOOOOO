from telebot import TeleBot
from datetime import datetime, timedelta
from collections import Counter
from io import BytesIO
import json

# --- –•–µ–ª–ø–µ—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ ---
def get_unique_users_for_event(docs, event_name):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö user_id –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è."""
    return set(
        doc.to_dict().get('userId') for doc in docs 
        if doc.to_dict().get('eventName') == event_name
    )

def safe_division(numerator, denominator):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–π."""
    return (numerator / denominator * 100) if denominator > 0 else 0

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
def register_admin_handlers(bot: TeleBot, db, app_id, admin_ids):

    @bot.message_handler(commands=['get_db_events'])
    def get_db_dump(message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ Firestore –≤ –≤–∏–¥–µ JSON —Ñ–∞–π–ª–∞."""
        if message.from_user.id not in admin_ids: return
        if not db:
            bot.reply_to(message, "‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return
        try:
            bot.send_message(message.chat.id, "‚è≥ –°–æ–±–∏—Ä–∞—é –≤—Å–µ —Å–æ–±—ã—Ç–∏—è... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
            
            events_ref = db.collection(f'artifacts/{app_id}/public/data/events')
            docs = events_ref.stream()
            
            all_events = []
            for doc in docs:
                event_data = doc.to_dict()
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamp –≤ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç datetime
                if 'timestamp' in event_data and hasattr(event_data['timestamp'], 'isoformat'):
                    event_data['timestamp'] = event_data['timestamp'].isoformat()
                all_events.append(event_data)

            if not all_events:
                bot.send_message(message.chat.id, "–°–æ–±—ã—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
                return

            json_data = json.dumps(all_events, indent=2, ensure_ascii=False).encode('utf-8')
            file_stream = BytesIO(json_data)
            file_stream.name = 'events.json'

            bot.send_document(message.chat.id, file_stream, caption=f"‚úÖ –ì–æ—Ç–æ–≤–æ! –í—ã–≥—Ä—É–∂–µ–Ω–æ {len(all_events)} —Å–æ–±—ã—Ç–∏–π.")

        except Exception as e:
            bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

    # --- –ù–û–í–´–ô, –ú–û–©–ù–´–ô –û–¢–ß–ï–¢ ---
    @bot.message_handler(commands=['get_report'], func=lambda message: message.from_user.id in admin_ids)
    def get_full_report(message):
        if not db:
            bot.reply_to(message, "‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return

        try:
            bot.send_message(message.chat.id, "‚è≥ –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –∏ –≥–æ—Ç–æ–≤–ª—é –æ—Ç—á–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π...")
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
            start_date = datetime.utcnow() - timedelta(days=7)
            events_ref = db.collection(f'artifacts/{app_id}/public/data/events')
            query = events_ref.where('timestamp', '>=', start_date)
            docs = list(query.stream())
            
            if not docs:
                bot.reply_to(message, "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –Ω–µ –±—ã–ª–æ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
                return

            # --- 1. –ì–∏–ø–æ—Ç–µ–∑–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω—ã –≤ –ø—Ä–æ–¥—É–∫—Ç–µ ---
            main_page_users = get_unique_users_for_event(docs, 'page_view_main')
            auto_selection_users = get_unique_users_for_event(docs, 'click_auto_selection')
            cr_main_to_constructor = safe_division(len(auto_selection_users), len(main_page_users))
            
            h1_report = (
                f"–ì–∏–ø–æ—Ç–µ–∑–∞ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω—ã –≤ –ø—Ä–æ–¥—É–∫—Ç–µ\n"
                f"  - CR —Å –≥–ª–∞–≤–Ω–æ–π –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä: *{cr_main_to_constructor:.1f}%* ({len(auto_selection_users)} –∏–∑ {len(main_page_users)})\n"
            )

            # --- 2. –ì–∏–ø–æ—Ç–µ–∑–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤–∞–∂–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è ---
            portfolio_view_users = get_unique_users_for_event(docs, 'page_view_portfolio')
            edit_click_users = get_unique_users_for_event(docs, 'click_edit_portfolio')
            save_edit_users = get_unique_users_for_event(docs, 'click_save_portfolio_edit')
            edit_adoption_rate = safe_division(len(edit_click_users), len(portfolio_view_users))
            save_rate = safe_division(len(save_edit_users), len(edit_click_users))

            h2_report = (
                f"–ì–∏–ø–æ—Ç–µ–∑–∞ 2: –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–∂–Ω–∞\n"
                f"  - –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä: *{edit_adoption_rate:.1f}%* ({len(edit_click_users)} –∏–∑ {len(portfolio_view_users)})\n"
                f"  - –°–æ—Ö—Ä–∞–Ω—è—é—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è: *{save_rate:.1f}%* ({len(save_edit_users)} –∏–∑ {len(edit_click_users)})\n"
            )

            # --- 3. –ì–∏–ø–æ—Ç–µ–∑–∞: –õ—é–¥–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—Ç –æ–±—É—á–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ ---
            demo_clicks = len([d for d in docs if d.to_dict().get('eventName') == 'click_demo_portfolio'])
            auto_clicks = len([d for d in docs if d.to_dict().get('eventName') == 'click_auto_selection'])

            h3_report = (
                f"–ì–∏–ø–æ—Ç–µ–∑–∞ 3: –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ\n"
                f"  - –í—ã–±–æ—Ä –ø—É—Ç–∏: –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä ({auto_clicks}) vs –î–µ–º–æ ({demo_clicks})\n"
            )

            # --- 4 & 5. –ì–∏–ø–æ—Ç–µ–∑—ã: –§–∏—á–∏ –¥–æ–≤–µ—Ä–∏—è (–ò—Å—Ç–æ—Ä–∏—è –∏ –°–æ—Ü. –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ) ---
            history_clicks = len([d for d in docs if d.to_dict().get('eventName') == 'switch_chart_mode' and d.to_dict().get('eventData', {}).get('mode') != 'future'])
            similar_clicks = len([d for d in docs if d.to_dict().get('eventName') == 'switch_portfolio_view' and d.to_dict().get('eventData', {}).get('view') == 'similar'])
            
            h45_report = (
                f"–ì–∏–ø–æ—Ç–µ–∑—ã 4/5: –§–∏—á–∏ –¥–æ–≤–µ—Ä–∏—è\n"
                f"  - –°–º–æ—Ç—Ä—è—Ç –∏—Å—Ç–æ—Ä–∏—é –≥—Ä–∞—Ñ–∏–∫–∞: *{history_clicks}* —Ä–∞–∑\n"
                f"  - –°–º–æ—Ç—Ä—è—Ç –ø–æ—Ö–æ–∂–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–∏: *{similar_clicks}* —Ä–∞–∑\n"
            )
            
            # --- 6. –ì–∏–ø–æ—Ç–µ–∑–∞: "–ü–æ–∫—Ä—ã—Ç–∏–µ —Ä–∏—Å–∫–æ–≤" —Å—Ç–∏–º—É–ª–∏—Ä—É–µ—Ç –∫ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ ---
            final_conversion_events = [d.to_dict() for d in docs if d.to_dict().get('eventName') == 'click_convert_to_real']
            total_conversions = len(final_conversion_events)
            hedge_selected_conversions = sum(1 for e in final_conversion_events if e.get('eventData', {}).get('hedge_risk_selected'))
            hedge_adoption_rate = safe_division(hedge_selected_conversions, total_conversions)

            h6_report = (
                f"–ì–∏–ø–æ—Ç–µ–∑–∞ 6: –ü–æ–∫—Ä—ã—Ç–∏–µ —Ä–∏—Å–∫–æ–≤\n"
                f"  - –í—ã–±–∏—Ä–∞—é—Ç –æ–ø—Ü–∏—é '–ø–æ–∫—Ä—ã—Ç—å —Ä–∏—Å–∫': *{hedge_adoption_rate:.1f}%* ({hedge_selected_conversions} –∏–∑ {total_conversions})\n"
            )
            
            # --- –û–ë–©–ê–Ø –í–û–†–û–ù–ö–ê –ö–û–ù–í–ï–†–°–ò–ò ---
            confirm_page_users = get_unique_users_for_event(docs, 'page_view_confirm_portfolio')
            final_conversion_users = get_unique_users_for_event(docs, 'click_convert_to_real')
            full_cr = safe_division(len(final_conversion_users), len(main_page_users))
            
            funnel_report = (
                f"üèÅ *–û–ë–©–ê–Ø –í–û–†–û–ù–ö–ê (–∑–∞ 7 –¥–Ω–µ–π)*\n"
                f"  - 1. –£–≤–∏–¥–µ–ª–∏ –≥–ª. —ç–∫—Ä–∞–Ω: *{len(main_page_users)}*\n"
                f"  - 2. –ù–∞—á–∞–ª–∏ –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä: *{len(auto_selection_users)}* ({safe_division(len(auto_selection_users), len(main_page_users)):.1f}%)\n"
                f"  - 3. –£–≤–∏–¥–µ–ª–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—å: *{len(portfolio_view_users)}* ({safe_division(len(portfolio_view_users), len(auto_selection_users)):.1f}%)\n"
                f"  - 4. –ü–µ—Ä–µ—à–ª–∏ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é: *{len(confirm_page_users)}* ({safe_division(len(confirm_page_users), len(portfolio_view_users)):.1f}%)\n"
                f"  - 5. *–°–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏—Å—å*: *{len(final_conversion_users)}* ({safe_division(len(final_conversion_users), len(confirm_page_users)):.1f}%)\n"
                f"  - *–ò—Ç–æ–≥–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è*: *{full_cr:.2f}%*\n"
            )
            
            # --- –ê–ù–ê–õ–ò–ó –ê–£–î–ò–¢–û–†–ò–ò –ö–û–ù–í–ï–†–°–ò–ô ---
            if final_conversion_events:
                surveyed_events = [e for e in final_conversion_events if e.get('eventData', {}).get('user_age') is not None]
                if surveyed_events:
                    ages = Counter(e['eventData']['user_age'] for e in surveyed_events).most_common()
                    experiences = Counter(e['eventData']['user_experience'] for e in surveyed_events).most_common()
                    all_activities = [act for e in surveyed_events if 'user_activities' in e['eventData'] for act in e['eventData']['user_activities']]
                    activities_counts = Counter(all_activities).most_common()

                    def format_counter(counter_list):
                        return ", ".join([f"'{k}': {v}" for k, v in counter_list]) if counter_list else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

                    survey_report = (
                        f"üïµÔ∏è *–ü–û–†–¢–†–ï–¢ –ö–û–ù–í–ï–†–°–ò–ò (–ø–æ –¥–∞–Ω–Ω—ã–º –æ–ø—Ä–æ—Å–∞)*\n"
                        f"  - –í–æ–∑—Ä–∞—Å—Ç: `{format_counter(ages)}`\n"
                        f"  - –û–ø—ã—Ç: `{format_counter(experiences)}`\n"
                        f"  - –î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å: `{format_counter(activities_counts)}`\n"
                    )
                else:
                    survey_report = "üïµÔ∏è *–ü–û–†–¢–†–ï–¢ –ö–û–ù–í–ï–†–°–ò–ò*\n  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø—Ä–æ—à–µ–¥—à–∏–µ –æ–ø—Ä–æ—Å –∏ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–≤—à–∏–µ—Å—è, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n"
            else:
                survey_report = "üïµÔ∏è *–ü–û–†–¢–†–ï–¢ –ö–û–ù–í–ï–†–°–ò–ò*\n  - –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n"

            # --- –°–±–æ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ---
            full_report_text = (
                f"üìä *–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –∑–∞ 7 –¥–Ω–µ–π*\n\n"
                f"{h1_report}\n"
                f"{h2_report}\n"
                f"{h3_report}\n"
                f"{h45_report}\n"
                f"{h6_report}\n"
                f"---\n"
                f"{funnel_report}\n"
                f"---\n"
                f"{survey_report}"
            )
            
            bot.reply_to(message, full_report_text, parse_mode='Markdown')

        except Exception as e:
            bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

    # === –ù–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê –î–õ–Ø –û–ß–ò–°–¢–ö–ò –ë–ê–ó–´ –î–ê–ù–ù–´–• ===
    @bot.message_handler(commands=['clear_db'], func=lambda message: message.from_user.id in admin_ids)
    def clear_database(message):
        if not db:
            bot.reply_to(message, "‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return

        # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        if "confirm" not in message.text.lower():
            bot.reply_to(
                message,
                "üõë *–í–ù–ò–ú–ê–ù–ò–ï!* –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.\n"
                "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –µ—â–µ —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "`/clear_db confirm`",
                parse_mode='Markdown'
            )
            return

        try:
            bot.reply_to(message, "‚è≥ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
            
            events_ref = db.collection(f'artifacts/{app_id}/public/data/events')
            docs = events_ref.stream()
            
            deleted_count = 0
            batch = db.batch()
            for doc in docs:
                batch.delete(doc.reference)
                deleted_count += 1
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á –∫–∞–∂–¥—ã–µ 500 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                if deleted_count % 500 == 0:
                    batch.commit()
                    batch = db.batch()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–æ–∫—É–º–µ–Ω—Ç—ã
            if deleted_count % 500 != 0:
                 batch.commit()

            success_message = f"‚úÖ *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞.*\n–£–¥–∞–ª–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: *{deleted_count}*"
            bot.reply_to(message, success_message, parse_mode='Markdown')

        except Exception as e:
            bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")