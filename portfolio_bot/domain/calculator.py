import random

class PortfolioCalculator:
    def __init__(self, repository):
        self.repository = repository

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ú–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–æ–Ω–¥–æ–≤ ---
    def calculate(self, risk_profile: str, amount: int, term: int, selected_funds: list[str] = None) -> dict:
        """
        –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω `selected_funds`, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Ö. –ò–Ω–∞—á–µ - –ø–æ–¥–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–µ.
        """
        print(f"\n--- üöÄ [–ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†] –†–∞—Å—á–µ—Ç: –†–∏—Å–∫='{risk_profile}', –°—É–º–º–∞={amount}, –°—Ä–æ–∫={term} ---")

        strategy_template = self.repository.get_strategy_template(risk_profile)
        all_funds = self.repository.get_all_funds()

        if not strategy_template:
            return {"error": f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è '{risk_profile}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."}

        # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –í—ã–±–∏—Ä–∞–µ–º, –∫–∞–∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å ---
        portfolio_composition_funds = []
        if selected_funds:
            print("[–®–ê–ì 1] –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —Ñ–æ–Ω–¥—ã –¥–ª—è –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–∞.")
            fund_map = {f['name']: f for f in all_funds}
            for fund_name in selected_funds:
                if fund_name in fund_map:
                    portfolio_composition_funds.append(fund_map[fund_name])
        else:
            print("[–®–ê–ì 1] –ü–æ–¥–±–∏—Ä–∞—é—Ç—Å—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ñ–æ–Ω–¥—ã –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.")
            portfolio_composition_funds = self._assemble_portfolio(strategy_template, all_funds)

        if not portfolio_composition_funds:
             return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ñ–æ–Ω–¥–æ–≤."}

        total_return, total_volatility = self._calculate_portfolio_metrics(portfolio_composition_funds, strategy_template)
        print(f"[–®–ê–ì 2] –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {total_return:.2f}%, –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {total_volatility:.2f}%")

        forecast = self._generate_forecast(amount, term, total_return, total_volatility)
        print("[–®–ê–ì 3] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞.")

        # –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–æ—Å—Ç–∞–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å –¥–æ–ª—è–º–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞
        composition_details = []
        shares = list(strategy_template['composition'].values())
        for i, fund in enumerate(portfolio_composition_funds):
            composition_details.append({"fund_name": fund['name'], "percentage": shares[i]})

        print("--- ‚úÖ [–ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†] –†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. ---\n")
        
        return {
            "initial_amount": amount,
            "term": term,
            "riskProfile": risk_profile, # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
            "strategy_name": strategy_template['name'],
            "expected_annual_return": round(total_return, 2),
            "composition": composition_details,
            "forecast": forecast
        }

    def _assemble_portfolio(self, strategy_template, all_funds):
        portfolio = []
        for risk_level, _ in strategy_template['composition'].items():
            candidates = [f for f in all_funds if f['risk_level'] == risk_level]
            if candidates:
                candidates.sort(key=lambda x: x['annual_return_percent'], reverse=True)
                portfolio.append(candidates[0])
        return portfolio

    def _calculate_portfolio_metrics(self, portfolio_composition, strategy_template):
        total_return = 0
        total_volatility = 0
        shares = list(strategy_template['composition'].values())
        
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ–Ω–¥–æ–≤ –∏ –¥–æ–ª–µ–π —Å–æ–≤–ø–∞–¥–∞–µ—Ç
        num_items = min(len(portfolio_composition), len(shares))

        for i in range(num_items):
            fund = portfolio_composition[i]
            share_fraction = shares[i] / 100.0
            total_return += fund['annual_return_percent'] * share_fraction
            total_volatility += fund['volatility_percent'] * share_fraction
            
        return total_return, total_volatility

    def _generate_forecast(self, amount, term, total_return, total_volatility):
        labels = list(range(term + 1))
        avg_data, min_data, max_data = [], [], []
        avg_rate = 1 + (total_return / 100.0)
        min_rate = 1 + ((total_return - total_volatility * 0.5) / 100.0)
        max_rate = 1 + ((total_return + total_volatility * 0.5) / 100.0)

        for year in labels:
            # –û–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö
            avg_data.append(round(amount * (avg_rate ** year), 2))
            min_data.append(round(amount * (min_rate ** year), 2))
            max_data.append(round(amount * (max_rate ** year), 2))

        return {"labels": labels, "avg": avg_data, "min": min_data, "max": max_data}

