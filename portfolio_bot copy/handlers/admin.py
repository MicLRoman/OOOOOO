from telebot import TeleBot
from datetime import datetime, timedelta
from collections import Counter
from io import BytesIO
import json

# --- –•–µ–ª–ø–µ—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ ---

def get_unique_users_for_event(docs, event_name):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö user_id –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è."""
    return set(
        doc.to_dict().get('userId') for doc in docs 
        if doc.to_dict().get('eventName') == event_name and doc.to_dict().get('userId')
    )

def safe_division(numerator, denominator):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–π –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö."""
    return (numerator / denominator * 100) if denominator > 0 else 0

def get_docs_by_event(docs, event_name):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è."""
    return [
        doc.to_dict() for doc in docs 
        if doc.to_dict().get('eventName') == event_name
    ]

def get_users_by_event_data(docs, event_name, data_key):
    """
    –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç user_id –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –≤ eventData.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å: { '–∑–Ω–∞—á–µ–Ω–∏–µ': {id1, id2}, ... }
    """
    user_groups = {}
    for doc in docs:
        event = doc.to_dict()
        if event.get('eventName') == event_name:
            event_data = event.get('eventData', {})
            key_value = event_data.get(data_key)
            user_id = event.get('userId')
            if key_value and user_id:
                if key_value not in user_groups:
                    user_groups[key_value] = set()
                user_groups[key_value].add(user_id)
    return user_groups

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
def register_admin_handlers(bot: TeleBot, db, app_id, admin_ids):

    @bot.message_handler(commands=['get_db_events'])
    def get_db_dump(message):
        # (—ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        if message.from_user.id not in admin_ids: return
        if not db:
            bot.reply_to(message, "‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return
        try:
            bot.send_message(message.chat.id, "‚è≥ –°–æ–±–∏—Ä–∞—é –≤—Å–µ —Å–æ–±—ã—Ç–∏—è...")
            events_ref = db.collection(f'artifacts/{app_id}/public/data/events')
            docs = events_ref.stream()
            all_events = []
            for doc in docs:
                event_data = doc.to_dict()
                if 'timestamp' in event_data and hasattr(event_data['timestamp'], 'isoformat'):
                    event_data['timestamp'] = event_data['timestamp'].isoformat()
                all_events.append(event_data)
            if not all_events:
                bot.send_message(message.chat.id, "–°–æ–±—ã—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
                return
            json_data = json.dumps(all_events, indent=2, ensure_ascii=False).encode('utf-8')
            file_stream = BytesIO(json_data)
            file_stream.name = 'events_dump.json'
            bot.send_document(message.chat.id, file_stream, caption=f"‚úÖ –í—ã–≥—Ä—É–∂–µ–Ω–æ {len(all_events)} —Å–æ–±—ã—Ç–∏–π.")
        except Exception as e:
            bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ: {e}")


    @bot.message_handler(commands=['get_report'], func=lambda message: message.from_user.id in admin_ids)
    def get_full_report(message):
        if not db:
            bot.reply_to(message, "‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return

        try:
            bot.send_message(message.chat.id, "‚è≥ –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –∏ –≥–æ—Ç–æ–≤–ª—é –æ—Ç—á–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π...")
            start_date = datetime.utcnow() - timedelta(days=7)
            events_ref = db.collection(f'artifacts/{app_id}/public/data/events')
            query = events_ref.where('timestamp', '>=', start_date)
            docs = list(query.stream())
            
            if not docs:
                bot.reply_to(message, "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –Ω–µ –±—ã–ª–æ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
                return

            # --- 1. –û–°–ù–û–í–ù–ê–Ø –í–û–†–û–ù–ö–ê ---
            acquisition_users = get_unique_users_for_event(docs, 'page_view_main')
            activation_users = get_unique_users_for_event(docs, 'page_view_portfolio')
            intent_users = get_unique_users_for_event(docs, 'click_confirm_portfolio')

            funnel_report = (
                f"üìä *–û–°–ù–û–í–ù–ê–Ø –í–û–†–û–ù–ö–ê –ü–†–û–î–£–ö–¢–ê (–∑–∞ 7 –¥–Ω–µ–π)*\n\n"
                f"1Ô∏è‚É£ *–ü—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ (Acquisition)*\n"
                f"   ‚îî –£–≤–∏–¥–µ–ª –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω: *{len(acquisition_users)}* —á–µ–ª.\n\n"
                f"2Ô∏è‚É£ *–ê–∫—Ç–∏–≤–∞—Ü–∏—è (Activation)*\n"
                f"   ‚îî –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª –ø–ª–∞–Ω: *{len(activation_users)}* —á–µ–ª.\n"
                f"   ‚îî CR1 (–≤ –ê–∫—Ç–∏–≤–∞—Ü–∏—é): *{safe_division(len(activation_users), len(acquisition_users)):.1f}%*\n\n"
                f"3Ô∏è‚É£ *–ù–∞–º–µ—Ä–µ–Ω–∏–µ (Intent)*\n"
                f"   ‚îî –ù–∞–∂–∞–ª ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª: *{len(intent_users)}* —á–µ–ª.\n"
                f"   ‚îî CR2 (–≤ –ù–∞–º–µ—Ä–µ–Ω–∏–µ): *{safe_division(len(intent_users), len(activation_users)):.1f}%*\n\n"
                f"üìà *–ò—Ç–æ–≥–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è (—Å–∫–≤–æ–∑–Ω–∞—è):* *{safe_division(len(intent_users), len(acquisition_users)):.2f}%*\n"
            )

            # --- 2. –ê–ù–ê–õ–ò–ó –ì–ò–ü–û–¢–ï–ó ---
            
            # --- –ì–∏–ø–æ—Ç–µ–∑–∞: –í—ã–±–æ—Ä —Ü–µ–ª–∏ ---
            goal_user_groups = get_users_by_event_data(docs, 'select_goal_on_main', 'goal')
            goal_popularity = "\n".join([f"   - {g}: {len(u)} —á–µ–ª." for g, u in goal_user_groups.items()]) or "   - –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            goal_influence = "\n".join([f"   - {g}: *{safe_division(len(intent_users.intersection(u)), len(u)):.1f}%*" for g, u in goal_user_groups.items()]) or "   - –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

            # --- –ì–∏–ø–æ—Ç–µ–∑–∞: –°–ª–∞–π–¥–µ—Ä —Ä–∏—Å–∫–∞ ---
            risk_user_groups = get_users_by_event_data(docs, 'auto_selection_risk_selected', 'riskProfile')
            risk_popularity = "\n".join([f"   - {r}: {len(u)} —á–µ–ª." for r, u in risk_user_groups.items()]) or "   - –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            risk_influence = "\n".join([f"   - {r}: *{safe_division(len(intent_users.intersection(u)), len(u)):.1f}%*" for r, u in risk_user_groups.items()]) or "   - –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

            # --- –ì–∏–ø–æ—Ç–µ–∑–∞: –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è (–†–µ–¥–∞–∫—Ç–æ—Ä) ---
            edit_users = get_unique_users_for_event(docs, 'click_edit_portfolio')
            editor_adoption_rate = safe_division(len(edit_users), len(activation_users))
            users_who_did_not_edit = activation_users - edit_users
            cr_with_edit = safe_division(len(intent_users.intersection(edit_users)), len(edit_users))
            cr_without_edit = safe_division(len(intent_users.intersection(users_who_did_not_edit)), len(users_who_did_not_edit))
            
            # --- –ì–∏–ø–æ—Ç–µ–∑–∞: –§–∏—á–∏ –¥–æ–≤–µ—Ä–∏—è ---
            view_switch_events = get_docs_by_event(docs, 'switch_portfolio_view')
            users_who_used_similar = {e.get('userId') for e in view_switch_events if e.get('eventData', {}).get('view') == 'similar' and e.get('userId')}
            users_who_did_not_use_similar = activation_users - users_who_used_similar
            similar_adoption_rate = safe_division(len(users_who_used_similar), len(activation_users))
            cr_with_similar = safe_division(len(intent_users.intersection(users_who_used_similar)), len(users_who_used_similar))
            cr_without_similar = safe_division(len(intent_users.intersection(users_who_did_not_use_similar)), len(users_who_did_not_use_similar))

            hypothesis_report = (
                f"üßê *–ê–ù–ê–õ–ò–ó –ì–ò–ü–û–¢–ï–ó*\n\n"
                f"*–í—ã–±–æ—Ä —Ü–µ–ª–∏:*\n"
                f"  *–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å:* –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ü–µ–ª—è–º\n{goal_popularity}\n"
                f"  *–í–ª–∏—è–Ω–∏–µ (Intent CR):*\n{goal_influence}\n\n"
                f"*–°–ª–∞–π–¥–µ—Ä —Ä–∏—Å–∫–∞:*\n"
                f"  *–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å:* –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—è–º\n{risk_popularity}\n"
                f"  *–í–ª–∏—è–Ω–∏–µ (Intent CR):*\n{risk_influence}\n\n"
                f"*–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è (–†–µ–¥–∞–∫—Ç–æ—Ä):*\n"
                f"  *–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å (Adoption Rate):* *{editor_adoption_rate:.1f}%* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞—à–ª–∏ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä.\n"
                f"  *–í–ª–∏—è–Ω–∏–µ (Intent CR):*\n"
                f"     - –° —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º: *{cr_with_edit:.1f}%*\n"
                f"     - –ë–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: *{cr_without_edit:.1f}%*\n\n"
                f"*–§–∏—á–∏ –¥–æ–≤–µ—Ä–∏—è (¬´–ü–æ—Ö–æ–∂–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–∏¬ª):*\n"
                f"  *–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å (Adoption Rate):* *{similar_adoption_rate:.1f}%* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ —Ñ–∏—á—É.\n"
                f"  *–í–ª–∏—è–Ω–∏–µ (Intent CR):*\n"
                f"     - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ñ–∏—á—É: *{cr_with_similar:.1f}%*\n"
                f"     - –ù–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏: *{cr_without_similar:.1f}%*\n"
            )

            # --- 3. –ê–ù–ê–õ–ò–ó –û–ü–†–û–°–ê (–≤–∫–ª—é—á–∞—è –ø—Å–∏—Ö–æ–≥—Ä–∞—Ñ–∏–∫—É) ---
            survey_events = get_docs_by_event(docs, 'submit_survey')
            def format_survey_counter(data_key):
                items = [e.get('eventData', {}).get(data_key) for e in survey_events if e.get('eventData', {}).get(data_key)]
                if not items: return "   - –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–æ–≤ (–¥–ª—è activities)
                if isinstance(items[0], list):
                    items = [item for sublist in items for item in sublist]
                counts = Counter(items)
                return "\n".join([f"   - {k}: {v} —á–µ–ª." for k, v in counts.most_common()])
            
            survey_report = (
                f"üß† *–ü–°–ò–•–û–ì–†–ê–§–ò–ß–ï–°–ö–ò–ô –ü–û–†–¢–†–ï–¢*\n\n"
                f"*–¢–µ—Å—Ç –ö–∞–Ω–µ–º–∞–Ω–∞:*\n{format_survey_counter('kahnemanChoice')}\n\n"
                f"*–í–æ–∑—Ä–∞—Å—Ç:*\n{format_survey_counter('age')}\n\n"
                f"*–û–ø—ã—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:*\n{format_survey_counter('experience')}\n\n"
                f"*–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å:*\n{format_survey_counter('activities')}\n"
            )

            # --- –°–±–æ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ---
            full_report_text = f"{funnel_report}\n---\n{hypothesis_report}\n---\n{survey_report}"
            
            bot.reply_to(message, full_report_text, parse_mode='Markdown')

        except Exception as e:
            import traceback
            traceback.print_exc()
            bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

    # (–∫–æ–º–∞–Ω–¥–∞ /clear_db –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    @bot.message_handler(commands=['clear_db'], func=lambda message: message.from_user.id in admin_ids)
    def clear_database(message):
        if not db:
            bot.reply_to(message, "‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return
        if "confirm" not in message.text.lower():
            bot.reply_to(
                message,
                "üõë *–í–ù–ò–ú–ê–ù–ò–ï!* –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.\n"
                "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –µ—â–µ —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "`/clear_db confirm`",
                parse_mode='Markdown'
            )
            return
        try:
            bot.reply_to(message, "‚è≥ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            events_ref = db.collection(f'artifacts/{app_id}/public/data/events')
            docs = events_ref.stream()
            deleted_count = 0
            batch = db.batch()
            for doc in docs:
                batch.delete(doc.reference)
                deleted_count += 1
                if deleted_count % 500 == 0:
                    batch.commit()
                    batch = db.batch()
            if deleted_count % 500 != 0:
                 batch.commit()
            success_message = f"‚úÖ *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞.*\n–£–¥–∞–ª–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: *{deleted_count}*"
            bot.reply_to(message, success_message, parse_mode='Markdown')
        except Exception as e:
            bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")

